name: AI PR Commenter

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  analyze_pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get PR Diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git diff origin/${{ github.event.pull_request.base.ref }} > pr_diff.txt

      - name: Generate AI Review Comments
        id: ai_review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Read and properly format diff content
          DIFF_CONTENT=$(jq -Rs . < pr_diff.txt)

          # Construct JSON request payload
          JSON_PAYLOAD=$(jq -n --arg diff "$DIFF_CONTENT" '{
            model: "gpt-4o-mini",
            messages: [
              {
                role: "system",
                content: "You are an expert AI code reviewer specialized in reviewing Java with Quarkus backend or React frontend code. Provide structured, concise, and actionable feedback following GitHub Flow best practices. Consider Java-specific conventions, Quarkus optimizations, and React performance improvements."
              },
              {
                role: "user",
                content: "Analyze the following code diff and provide review comments:\n\n\($diff)"
              }
            ]
          }')

          # Send request to OpenAI
          RESPONSE=$(curl -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")

          echo "API Response: $RESPONSE"  # Debugging Line

          # Extract AI-generated comment
          AI_REVIEW_COMMENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

          if [[ "$AI_REVIEW_COMMENT" == "null" || -z "$AI_REVIEW_COMMENT" ]]; then
            echo "AI Review Comment is null or empty. Check API response format."
            exit 1
          fi
          
          # Remove problematic characters from AI response
          SANITIZED_COMMENT=$(echo "$AI_REVIEW_COMMENT" | sed 's/^[#*]\+ //g' | tr -d '\r' | tr '\n' ' ')
          
          echo "SANITIZED_COMMENT=$SANITIZED_COMMENT" >> $GITHUB_ENV
          
          # Preserve formatting with EOF block
          echo "FORMATTED_COMMENT<<EOF" >> $GITHUB_ENV
          echo "$SANITIZED_COMMENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post AI Review Comment
        uses: mshick/add-pr-comment@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: "${{ env.FORMATTED_COMMENT }}"
          allow-repeats: false
